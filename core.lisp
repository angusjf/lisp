(define id (lambda (a) a))
(define nil ())
(define not (lambda (b) (if b nil t)))
(define or (lambda (a b) (if a t b)))
(define and (lambda (a b) (if a b nil)))
(define succ (lambda (n) (+ n 1)))
(define pred (lambda (n) (- n 1)))
(define zero? (lambda (n) (= n 0)))
(define even? (lambda (n) (= (mod n 2) 0)))
(define odd? (lambda (n) (= (mod n 2) 1)))
(define exp (lambda (x p) (if (= 0 p) 1 (* x (exp x (- p 1))))))
(define map (lambda (f xs) (if xs (cons (f (car xs)) (map f (cdr xs))) ())))
(define filter (lambda (f xs) (if xs (if (f (car xs)) (cons (car xs) (filter f (cdr xs))) (filter f (cdr xs))) ())))
(define fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1))))))
(define range (lambda (min max) (if (= min max) () (cons min (range (succ min) max)))))
(define nth (lambda (n xs) (if (zero? n) (car xs) (nth (pred n) (cdr xs)))))
(define append (lambda (xs ys) (if xs (cons (car xs) (append (cdr xs) ys)) ys)))
(define length (lambda (xs) (if xs (succ (length (cdr xs))) 0)))
(define take (lambda (n xs) (if (zero? n) () (cons (car xs) (take (pred n) (cdr xs))))))
